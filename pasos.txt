#Basicos
git --version
git config --global user.name "your name"
git config --global user.email >your email>
git config --list

#Comandos
git init
git status
git add . #to staging area
git commit -m "message" #aceptamos cambios de lo que hay en stage (todo de golpe)
git log --oneline
git checkout <nº commit> <file> #(recuperar un archivo de un commit anterior)
git reset HEAD index.html       #descartar el checkout y volver al HEAD ultimo commit
git checkout -- index.html

git remote add origin <repository URL>
– Add the remote online repository

actualizar tras comit la rama en github remoto
git push -u origin master


## NODE NPM ###

#inicializamos el package.json
npm init
instalamos un servidor para trabajar (en este caso lo marcamos solo para utilizar en desarrollo)
npm install lite-server --save-dev

el --save-dev hace que se guarden los cambios en el package.json para desarrollo
-- save guarda como dependencia

Cómo añadir scripts de ejecución a npm en un proyecto -> package.json
 "scripts": {
    "start": "npm run lite",
    "test": "echo \"Error: no test specified\" && exit 1",
    "lite": "lite-server"
  },






###################

Resolving Git line ending issues in containers (resulting in many modified files)#
Since Windows and Linux use different default line endings, Git may report a large number of modified files that have no differences aside from their line endings. To prevent this from happening, you can disable line ending conversion using a .gitattributes file or globally on the Windows side.

Typically adding or modifying a .gitattributes file in your repository is the most reliable way to solve this problem. Committing this file to source control will help others and allows you to vary behaviors by repository as appropriate. For example, adding the following to .gitattributes file to the root of your repository will force everything to be LF, except for Windows batch files that require CRLF:

* text=auto eol=lf
*.{cmd,[cC][mM][dD]} text eol=crlf
*.{bat,[bB][aA][tT]} text eol=crlf
Note that this works in Git v2.10+, so if you are running into problems, be sure you've got a recent Git client installed. You can add other file types in your repository that require CRLF to this same file.

If you would prefer to still always upload Unix-style line endings (LF), you can use the input option.

git config --global core.autocrlf input
If you'd prefer to disable line-ending conversion entirely, run the following instead:

git config --global core.autocrlf false